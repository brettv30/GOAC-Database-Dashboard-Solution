-- FILE FOR ALL DML, EVERYTHING WAS PLACED INTO PROCEDURES TO AUTOMATE THE UPLOAD PROCESS

-- FORMAT INCOMING DATE

DELIMITER //

CREATE PROCEDURE FORMAT_INCOMING_DATE()
BEGIN

	-- HANDLE THE #VALUE! ERRORS
	UPDATE ODS_SALES_DATA_LARGE
	SET SLS_DT = '12/31/9999'
	WHERE SLS_DT = "#VALUE!";

	-- SET ALL TEXT COLUMNS TO PROPER DATE FORMAT
	UPDATE ODS_SALES_DATA_LARGE
	SET CUST_BIRTH_DT = STR_TO_DATE(CUST_BIRTH_DT, '%m/%d/%Y'),
		STR_EST_DT = STR_TO_DATE(STR_EST_DT, '%m/%d/%Y'),
		SLS_DT = STR_TO_DATE(SLS_DT, '%m/%d/%Y');

	-- CHANGE ALL TEXT COLUMNS TO DATE COLUMNS 
	ALTER TABLE `380-final-bv`.`ODS_SALES_DATA_LARGE` 
	CHANGE COLUMN `CUST_BIRTH_DT` `CUST_BIRTH_DT` DATE NULL DEFAULT NULL,
	CHANGE COLUMN `STR_EST_DT` `STR_EST_DT` DATE NULL DEFAULT NULL,
	CHANGE COLUMN `SLS_DT` `SLS_DT` DATE NULL DEFAULT NULL;

	-- SET ALL TEXT COLUMNS TO PROPER DATE FORMAT
	UPDATE ODS_PROD_LOOKUP
	SET PROD_INTRO_DT = STR_TO_DATE(PROD_INTRO_DT, '%m/%d/%Y');

	-- CHANGE ALL TEXT COLUMNS TO DATE COLUMNS 
	ALTER TABLE `380-final-bv`.`ODS_PROD_LOOKUP`
	CHANGE COLUMN `PROD_INTRO_DT` `PROD_INTRO_DT` DATE NULL DEFAULT NULL; 

END //

DELIMITER ;

-- REMOVE EXTRA NUMBERS SO DATA FITS INTO THE PROPER DIMENSIONS

DELIMITER //

CREATE PROCEDURE REMOVE_EXTRA_NUMS()
BEGIN
UPDATE ODS_SALES_DATA_LARGE
SET CUST_NO = substr(CUST_NO, 3);
UPDATE ODS_CUST_LOOKUP
SET CUST_NO = substr(CUST_NO, 3);
UPDATE ODS_PROD_LOOKUP
SET PROD_SKU_NO = substr(PROD_SKU_NO, 3);
END //

DELIMITER ;

-- REMOVE PHONE CHARS

DELIMITER //

CREATE PROCEDURE REMOVE_PHONE_CHARS()
BEGIN
UPDATE ODS_SALES_DATA_LARGE
SET CUST_PHN_NO = REPLACE(CUST_PHN_NO, '-', ''),
	STR_MAN_PHONE_NO = REPLACE(STR_MAN_PHONE_NO, '-', '');
END //

DELIMITER ;

-- POPULATE CUSTOMERS 

DELIMITER //

CREATE PROCEDURE POPULATE_CUSTOMERS()
BEGIN

INSERT INTO CUSTOMERS (CUST_ID, CUST_NO, CUST_NM, CUST_CITY_NM, CUST_STREET_AD, CUST_POST_CD, CUST_STATE_CD, CUST_PHN_NO, CUST_BIRTH_DT, CUST_INCOME_CD, CUST_LVL_CD)
SELECT DISTINCT oc.CUST_ID, os.CUST_NO, os.CUST_NM, os.CUST_CITY_NM, os.CUST_STREET_AD, os.CUST_POST_CD, os.CUST_STATE_CD, os.CUST_PHN_NO, os.CUST_BIRTH_DT,
CASE
	WHEN CUST_INCOME_AM > 55000 THEN 'H'
    WHEN CUST_INCOME_AM <= 55000 AND CUST_INCOME_AM > 40000 THEN 'M'
    WHEN CUST_INCOME_AM <= 40000 AND CUST_INCOME_AM > 15000 THEN 'L'
    WHEN CUST_INCOME_AM < 15000 THEN 'P'
END AS CUST_INCOME_CD, 
CASE
	WHEN (SLS_QTY_NO * SLS_UNIT_PRC_AM) > 1000 THEN 'G'
    WHEN (SLS_QTY_NO * SLS_UNIT_PRC_AM) <= 1000 AND (SLS_QTY_NO * SLS_UNIT_PRC_AM) > 500 THEN 'S'
    WHEN (SLS_QTY_NO * SLS_UNIT_PRC_AM) <= 500 AND (SLS_QTY_NO * SLS_UNIT_PRC_AM) > 100 THEN 'B' 
END AS CUST_LVL_CD
FROM ODS_SALES_DATA_LARGE os
JOIN ODS_CUST_LOOKUP oc
ON os.CUST_NO = oc.CUST_NO
GROUP BY CUST_ID, CUST_NO;

END //

DELIMITER ;

-- POPULATE PRODUCTS

DELIMITER //

CREATE PROCEDURE POPULATE_PRODUCTS()  
BEGIN

INSERT INTO PRODUCTS (PROD_ID, PROD_NM, PROD_SKU_NO, PROD_CAT_CD, PROD_LN_CD, PROD_PACK_SZ_NO, PROD_INTRO_DT)
SELECT DISTINCT op.PROD_ID, os.PROD_NM, op.PROD_SKU_NO, os.PROD_CAT_CD, os.PROD_LN_CD, os.PROD_PACK_SIZE_NO, op.PROD_INTRO_DT
FROM ODS_SALES_DATA_LARGE os
JOIN ODS_PROD_LOOKUP op
ON os.PROD_NM = op.PROD_NM;

END //

DELIMITER ;

-- POPULATE STORES 

DELIMITER //

CREATE PROCEDURE POPULATE_STORES()
BEGIN

INSERT INTO STORES (STR_ID, STR_NO, STR_NM, STR_STREET_AD, STR_CTY_NM, STR_STATE_CD, STR_POST_CD, STR_MAN_NM, STR_MAN_PHN_NO, STR_LVL_CD, STR_START_DT)
SELECT DISTINCT STR_ID, STR_NO, STR_NM, STR_STREET_AD, STR_CITY_NM, STR_STATE_CD, STR_POST_CD, STR_MAN_NM, STR_MAN_PHONE_NO, STR_LVL_CD, STR_EST_DT
FROM ODS_SALES_DATA_LARGE os
GROUP BY STR_ID;

END //

DELIMITER ;

-- POPULATE TIMES

DELIMITER //

CREATE PROCEDURE POPULATE_TIMES()
BEGIN

INSERT INTO TIMES
SELECT * FROM ODS_TIME_DATA
WHERE TME_DSPL_DT BETWEEN '2014-01-01' AND '2015-12-31';

END //

DELIMITER ;

-- POPULATE SALES_FACTS

DELIMITER //

CREATE PROCEDURE POPULATE_SALES_FACTS()
BEGIN

	INSERT INTO SALES_FACTS(CUST_ID, PROD_ID, SLS_UNT_PRC_AM, SLS_QTY_NO, SLS_UNT_CST_AM, SLS_PROMO_IN, STR_ID, TME_DAY_ID)
	SELECT DISTINCT C.CUST_ID, P.PROD_ID, os.SLS_UNIT_PRC_AM, os.SLS_QTY_NO, op.SLS_UNIT_COST_AM, os.SLS_PROMO_IN, S.STR_ID, T.TME_DAY_ID
	FROM ODS_SALES_DATA_LARGE os
	JOIN CUSTOMERS C
	ON os.CUST_NO = C.CUST_NO
	JOIN PRODUCTS P
	ON os.PROD_NM = P.PROD_NM
	JOIN STORES S
	ON os.STR_ID = S.STR_ID
	JOIN TIMES T
	ON os.SLS_DT = T.TME_DSPL_DT
	JOIN ods_prod_lookup op
	ON os.PROD_NM = op.PROD_NM;
    
	UPDATE SALES_FACTS
	SET SLS_GRS_PFT_AM = ((SLS_QTY_NO*SLS_UNT_PRC_AM) - (SLS_QTY_NO*SLS_UNT_CST_AM));
    
END //

DELIMITER ;


#######################################

--  DAILY UPDATE PROCEDURE SECTION

-- FORMAT DAILY DATE

DELIMITER //

CREATE PROCEDURE FORMAT_DAILY_DATE()
BEGIN
	-- SET ALL TEXT COLUMNS TO PROPER DATE FORMAT
	UPDATE ODS_SALES_DATA_SMALL
	SET CUST_BIRTH_DT = STR_TO_DATE(CUST_BIRTH_DT, '%m/%d/%Y'),
		STR_EST_DT = STR_TO_DATE(STR_EST_DT, '%m/%d/%Y'),
		SLS_DT = STR_TO_DATE(SLS_DT, '%m/%d/%Y');
		
	-- CHANGE ALL TEXT COLUMNS TO DATE COLUMNS 
	ALTER TABLE `380-final-bv`.`ODS_SALES_DATA_SMALL` 
	CHANGE COLUMN `CUST_BIRTH_DT` `CUST_BIRTH_DT` DATE NULL DEFAULT NULL,
	CHANGE COLUMN `STR_EST_DT` `STR_EST_DT` DATE NULL DEFAULT NULL,
	CHANGE COLUMN `SLS_DT` `SLS_DT` DATE NULL DEFAULT NULL;
    
END //

DELIMITER ;

-- REMOVE EXTRA NUMS

DELIMITER //

CREATE PROCEDURE UPDATE_DAILY_EXTRA_NUMS()
BEGIN
UPDATE ODS_SALES_DATA_SMALL
SET CUST_NO = substr(CUST_NO, 3);	# Slim down the digits in the CUST_NO that way it can fit into the table
END //

DELIMITER ;

-- UPDATE PHONE NUMBERS

DELIMITER //

CREATE PROCEDURE UPDATE_DAILY_PHONE_NUMBERS()
BEGIN
UPDATE ODS_SALES_DATA_SMALL	# Pull from the daily data
SET CUST_PHN_NO = REPLACE(CUST_PHN_NO, '-', ''),
	STR_MAN_PHONE_NO = REPLACE(STR_MAN_PHONE_NO, '-', '');
END //

DELIMITER 

-- UPDATE CUSTOMERS 

DELIMITER //

CREATE PROCEDURE UPDATE_DAILY_CUSTOMERS()
BEGIN
                       
UPDATE CUSTOMERS c
INNER JOIN ODS_SALES_DATA_SMALL os	# Pull from the daily data
ON c.CUST_NO = os.CUST_NO
INNER JOIN ODS_SALES_DATA_LARGE ol
ON c.CUST_NO = ol.CUST_NO
SET CUST_LVL_CD = 'G' 
WHERE (ol.SLS_QTY_NO * ol.SLS_UNIT_PRC_AM) + (os.SLS_QTY_NO * os.SLS_UNIT_PRC_AM) > 1000;

UPDATE CUSTOMERS c
INNER JOIN ODS_SALES_DATA_SMALL os	# Pull from the daily data
ON c.CUST_NO = os.CUST_NO
INNER JOIN ODS_SALES_DATA_LARGE ol
ON c.CUST_NO = ol.CUST_NO
SET CUST_LVL_CD = 'S' 
WHERE (ol.SLS_QTY_NO * ol.SLS_UNIT_PRC_AM) + (os.SLS_QTY_NO * os.SLS_UNIT_PRC_AM) <= 1000 AND (ol.SLS_QTY_NO * ol.SLS_UNIT_PRC_AM) + (os.SLS_QTY_NO * os.SLS_UNIT_PRC_AM) > 500;

UPDATE CUSTOMERS c
INNER JOIN ODS_SALES_DATA_SMALL os	# Pull from the daily data
ON c.CUST_NO = os.CUST_NO
INNER JOIN ODS_SALES_DATA_LARGE ol	
ON c.CUST_NO = ol.CUST_NO
SET CUST_LVL_CD = 'B' 
WHERE (ol.SLS_QTY_NO * ol.SLS_UNIT_PRC_AM) + (os.SLS_QTY_NO * os.SLS_UNIT_PRC_AM) <= 500 AND (ol.SLS_QTY_NO * ol.SLS_UNIT_PRC_AM) + (os.SLS_QTY_NO * os.SLS_UNIT_PRC_AM) > 100;
                         
END //

DELIMITER ;

-- UPDATE PRODUCTS

DELIMITER //

CREATE PROCEDURE UPDATE_DAILY_PRODUCTS() 
BEGIN 

INSERT INTO PRODUCTS (PROD_ID, PROD_NM, PROD_SKU_NO, PROD_CAT_CD, PROD_LN_CD, PROD_PACK_SZ_NO, PROD_INTRO_DT)
SELECT DISTINCT p.PROD_ID, os.PROD_NM, p.PROD_SKU_NO, os.PROD_CAT_CD, os.PROD_LN_CD, os.PROD_PACK_SIZE_NO, p.PROD_INTRO_DT
FROM ODS_SALES_DATA_SMALL os	# Here we pull from the daily data
JOIN PRODUCTS p
ON os.PROD_NM = p.PROD_NM
WHERE os.PROD_CAT_CD != p.PROD_CAT_CD;

UPDATE PRODUCTS p
INNER JOIN ODS_SALES_DATA_SMALL os	# Here we pull from the daily data
ON p.PROD_NM = os.PROD_NM
SET p.PROD_LN_CD = os.PROD_LN_CD;


END //

DELIMITER ;

-- UPDATE STORES

DELIMITER //

CREATE PROCEDURE UPDATE_DAILY_STORES()
BEGIN

INSERT INTO STORES (STR_ID, STR_NO, STR_NM, STR_STREET_AD, STR_CTY_NM, STR_STATE_CD, STR_POST_CD, STR_MAN_NM, STR_MAN_PHN_NO, STR_LVL_CD, STR_START_DT)
SELECT DISTINCT os.STR_ID, os.STR_NO, os.STR_NM, os.STR_STREET_AD, os.STR_CITY_NM, os.STR_STATE_CD, os.STR_POST_CD, os.STR_MAN_NM, os.STR_MAN_PHONE_NO, os.STR_LVL_CD, os.STR_EST_DT
FROM ODS_SALES_DATA_SMALL os	# here we pull from the daily data
JOIN STORES s
ON os.STR_ID = s.STR_ID
WHERE os.STR_MAN_NM != s.STR_MAN_NM
GROUP BY os.STR_ID;

END//

DELIMITER ;

-- UPDATE SALES FACTS TABLE 

DELIMITER //

CREATE PROCEDURE UPDATE_DAILY_SALES_FACTS()
BEGIN 

	INSERT INTO SALES_FACTS(CUST_ID, PROD_ID, SLS_UNT_PRC_AM, SLS_QTY_NO, SLS_UNT_CST_AM, SLS_PROMO_IN, STR_ID, TME_DAY_ID)
	SELECT DISTINCT C.CUST_ID, P.PROD_ID, os.SLS_UNIT_PRC_AM, os.SLS_QTY_NO, op.SLS_UNIT_COST_AM, os.SLS_PROMO_IN, S.STR_ID, T.TME_DAY_ID
	FROM ODS_SALES_DATA_SMALL os	# Here we pull from the daily data
	JOIN CUSTOMERS C
	ON os.CUST_NO = C.CUST_NO
	JOIN PRODUCTS P
	ON os.PROD_NM = P.PROD_NM
	JOIN STORES S
	ON os.STR_ID = S.STR_ID
	JOIN TIMES T
	ON os.SLS_DT = T.TME_DSPL_DT
	JOIN ods_prod_lookup op
	ON os.PROD_NM = op.PROD_NM;
    
	UPDATE SALES_FACTS
	SET SLS_GRS_PFT_AM = ((SLS_QTY_NO*SLS_UNT_PRC_AM) - (SLS_QTY_NO*SLS_UNT_CST_AM));
    
END //

DELIMITER ;